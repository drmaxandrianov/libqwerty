Library "Qwerty" was designed for easy working with strings in C, but can be also used in C++.

Introduction.
================
This is a tutorial for "Qwerty" library, which will help you understand main principles.

Preparations.
First of all download the library from "Downloads" section. Archive has two files inside: "qwerty.c" (source file) and "qwerty.h" (header file).

Including and compiling.
Copy this two files in your project folder.
Add following code in the beginning of each file, where you plan to use libqwerty:
#include "qwerty.h"
Compile "qwerty.c" to "qwerty.o" file in command line using GCC:
$ gcc -c qwerty.c
Include "qwerty.o" file to GCC arguments during linking (for example your code is in file named "main.c"):
$ gcc main.c qwerty.o -o main
Finish. As you see, the process is standard.
Using
Below is small program, analog to original "Hello World":

#include "qwerty.h"

int main() {

    // Create new string
    Qwerty myStr = newQwerty("Hello World");

    // Print this string with new line at the end
    printlnQwerty(myStr);

    return 0;
}


Reference.
Below is reference to all functions available in library:

// Creates new Qwerty from ordinary string
Qwerty newQwerty(char* string);

// Creates new Qwerty from ordinary string
Qwerty newQwertyFromString(char* string);

// Creates new Qwerty from Qwerty
Qwerty newQwertyFromQwerty(Qwerty string);

// Creates new Qwerty from Integer
Qwerty newQwertyFromInt(int number);

// Creates new Qwerty from Long Integer
Qwerty newQWertyFromLong(long number);

// Creates new Qwerty from Double
Qwerty newQwertyFromDouble(double number);

// Prints Qwerty and returns it
Qwerty printQwerty(Qwerty string);

// Prints Qwerty with new line at the end and returns it
Qwerty printlnQwerty(Qwerty string);

// Returns length of Qwerty excluding '\0'
int lengthQwerty(Qwerty string);

// Returns ordinary string, created from Qwerty
char* stringifyQwerty(Qwerty string);

// Returns concateneted Qwerty
Qwerty concatQwerty(Qwerty string1, Qwerty string2);

// Splits Qwerty with position and returns left part,
// values below zero can be used too
Qwerty splitQwertyReturnLeft(Qwerty string, int position);

// Splits Qwerty with position and returns right part,
// values below zero can be used too
Qwerty splitQwertyReturnRight(Qwerty string, int position);

// Returns index of first match, if not found returns -1
int findQwerty(Qwerty string, Qwerty part);

// Compare two strings as original strcmp function
int compareQwerty(Qwerty string1, Qwerty string2);

// Free memory used by string
void deleteQwerty(Qwerty string)
